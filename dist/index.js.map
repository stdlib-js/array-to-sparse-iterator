{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar isCollection = require( '@stdlib/assert-is-collection' );\nvar isAccessorArray = require( '@stdlib/array-base-assert-is-accessor-array' );\nvar iteratorSymbol = require( '@stdlib/symbol-iterator' );\nvar accessorGetter = require( '@stdlib/array-base-accessor-getter' );\nvar getter = require( '@stdlib/array-base-getter' );\nvar dtype = require( '@stdlib/array-dtype' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iterates over each element in a sparse array-like object.\n*\n* @param {Collection} src - input value\n* @param {Function} [mapFcn] - function to invoke for each iterated value\n* @param {*} [thisArg] - execution context\n* @throws {TypeError} first argument must be an array-like object\n* @throws {TypeError} second argument must be a function\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = sparsearray2iterator( [ 1, , 3, 4 ] );\n*\n* var v = iter.next().value;\n* // returns 1\n*\n* v = iter.next().value;\n* // returns 3\n*\n* v = iter.next().value;\n* // returns 4\n*/\nfunction sparsearray2iterator( src ) {\n\tvar thisArg;\n\tvar iter;\n\tvar FLG;\n\tvar fcn;\n\tvar get;\n\tvar dt;\n\tvar i;\n\tif ( !isCollection( src ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array-like object. Value: `%s`.', src ) );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tfcn = arguments[ 1 ];\n\t\tif ( !isFunction( fcn ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a function. Value: `%s`.', fcn ) );\n\t\t}\n\t\tthisArg = arguments[ 2 ];\n\t}\n\ti = -1;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tif ( fcn ) {\n\t\tsetReadOnly( iter, 'next', next1 );\n\t} else {\n\t\tsetReadOnly( iter, 'next', next2 );\n\t}\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\t// Resolve an accessor for retrieving array elements (e.g., to accommodate `Complex64Array`, etc):\n\tdt = dtype( src );\n\tif ( isAccessorArray( src ) ) {\n\t\tget = accessorGetter( dt );\n\t} else {\n\t\tget = getter( dt );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next1() {\n\t\tvar len;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tlen = src.length;\n\t\ti += 1;\n\t\twhile ( i < len && get( src, i ) === void 0 ) {\n\t\t\ti += 1;\n\t\t}\n\t\tif ( i >= len ) {\n\t\t\tFLG = true;\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': fcn.call( thisArg, get( src, i ), i, src ),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next2() {\n\t\tvar len;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tlen = src.length;\n\t\ti += 1;\n\t\twhile ( i < len && get( src, i ) === void 0 ) {\n\t\t\ti += 1;\n\t\t}\n\t\tif ( i >= len ) {\n\t\t\tFLG = true;\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': get( src, i ),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\tif ( fcn ) {\n\t\t\treturn sparsearray2iterator( src, fcn, thisArg );\n\t\t}\n\t\treturn sparsearray2iterator( src );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = sparsearray2iterator;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator from a sparse array-like value.\n*\n* @module @stdlib/array-to-sparse-iterator\n*\n* @example\n* var sparsearray2iterator = require( '@stdlib/array-to-sparse-iterator' );\n*\n* var iter = sparsearray2iterator( [ 1, , 3, 4 ] );\n*\n* var v = iter.next().value;\n* // returns 1\n*\n* v = iter.next().value;\n* // returns 3\n*\n* v = iter.next().value;\n* // returns 4\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,uDAAwD,EAC/EC,EAAa,QAAS,4BAA6B,EACnDC,EAAe,QAAS,8BAA+B,EACvDC,EAAkB,QAAS,6CAA8C,EACzEC,EAAiB,QAAS,yBAA0B,EACpDC,EAAiB,QAAS,oCAAqC,EAC/DC,EAAS,QAAS,2BAA4B,EAC9CC,EAAQ,QAAS,qBAAsB,EACvCC,EAAS,QAAS,uBAAwB,EA2B9C,SAASC,EAAsBC,EAAM,CACpC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACJ,GAAK,CAACf,EAAcQ,CAAI,EACvB,MAAM,IAAI,UAAWF,EAAQ,8EAA+EE,CAAI,CAAE,EAEnH,GAAK,UAAU,OAAS,EAAI,CAE3B,GADAI,EAAM,UAAW,CAAE,EACd,CAACb,EAAYa,CAAI,EACrB,MAAM,IAAI,UAAWN,EAAQ,qEAAsEM,CAAI,CAAE,EAE1GH,EAAU,UAAW,CAAE,CACxB,CACA,OAAAM,EAAI,GAGJL,EAAO,CAAC,EACHE,EACJd,EAAaY,EAAM,OAAQM,CAAM,EAEjClB,EAAaY,EAAM,OAAQO,CAAM,EAElCnB,EAAaY,EAAM,SAAUQ,CAAI,EAG5BhB,GACJJ,EAAaY,EAAMR,EAAgBiB,CAAQ,EAG5CL,EAAKT,EAAOG,CAAI,EACXP,EAAiBO,CAAI,EACzBK,EAAMV,EAAgBW,CAAG,EAEzBD,EAAMT,EAAQU,CAAG,EAEXJ,EAQP,SAASM,GAAQ,CAChB,IAAII,EACJ,GAAKT,EACJ,MAAO,CACN,KAAQ,EACT,EAID,IAFAS,EAAMZ,EAAI,OACVO,GAAK,EACGA,EAAIK,GAAOP,EAAKL,EAAKO,CAAE,IAAM,QACpCA,GAAK,EAEN,OAAKA,GAAKK,GACTT,EAAM,GACC,CACN,KAAQ,EACT,GAEM,CACN,MAASC,EAAI,KAAMH,EAASI,EAAKL,EAAKO,CAAE,EAAGA,EAAGP,CAAI,EAClD,KAAQ,EACT,CACD,CAQA,SAASS,GAAQ,CAChB,IAAIG,EACJ,GAAKT,EACJ,MAAO,CACN,KAAQ,EACT,EAID,IAFAS,EAAMZ,EAAI,OACVO,GAAK,EACGA,EAAIK,GAAOP,EAAKL,EAAKO,CAAE,IAAM,QACpCA,GAAK,EAEN,OAAKA,GAAKK,GACTT,EAAM,GACC,CACN,KAAQ,EACT,GAEM,CACN,MAASE,EAAKL,EAAKO,CAAE,EACrB,KAAQ,EACT,CACD,CASA,SAASG,EAAKG,EAAQ,CAErB,OADAV,EAAM,GACD,UAAU,OACP,CACN,MAASU,EACT,KAAQ,EACT,EAEM,CACN,KAAQ,EACT,CACD,CAQA,SAASF,GAAU,CAClB,OAAKP,EACGL,EAAsBC,EAAKI,EAAKH,CAAQ,EAEzCF,EAAsBC,CAAI,CAClC,CACD,CAKAX,EAAO,QAAUU,IC1JjB,IAAIe,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "setReadOnly", "isFunction", "isCollection", "isAccessorArray", "iteratorSymbol", "accessorGetter", "getter", "dtype", "format", "sparsearray2iterator", "src", "thisArg", "iter", "FLG", "fcn", "get", "dt", "i", "next1", "next2", "end", "factory", "len", "value", "main"]
}
